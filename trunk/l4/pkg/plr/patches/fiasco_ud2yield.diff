diff --git a/src/kern/ia32/thread-ia32.cpp b/src/kern/ia32/thread-ia32.cpp
index d6fb000..7be482b 100644
--- a/src/kern/ia32/thread-ia32.cpp
+++ b/src/kern/ia32/thread-ia32.cpp
@@ -30,6 +30,7 @@ EXTENSION class Thread
 {
 private:
   static int  (*int3_handler)(Trap_state*);
+  static int  (*int42_handler)(Trap_state*);
 };
 
 
@@ -196,6 +197,26 @@ Thread::handle_slow_trap(Trap_state *ts)
 	  ts->_err    = 0;
         }
 
+      if (ts->_trapno == 6)
+        {
+	  LOG_MSG_3VAL(current(), "UD2", dbg_id(), ts->ip(), 0);
+	  ts->ip(ts->ip()+2);
+	  //Sched_context::rq.current().invalidate_sched();
+	  switch_sched(sched(), &Sched_context::rq.current());
+	  schedule();
+	  goto success;
+        }
+
+      if (ts->_trapno == 13 && ts->_err == 530 /* INT 0x42 */)
+        {
+	  /*printf("Replica %lx bailout @ %lx\n", dbg_id(), ts->ip());*/
+	  ts->_trapno = 3;
+	  ts->ip(ts->ip()+2);
+	  if (int42_handler && int42_handler(ts))
+	    goto success;
+	  goto generic_debug;
+        }
+
       if (send_exception(ts))
 	goto success;
     }
@@ -517,6 +538,7 @@ IMPLEMENTATION[ia32 || amd64]:
 #include "terminate.h"
 
 int (*Thread::int3_handler)(Trap_state*);
+int (*Thread::int42_handler)(Trap_state*);
 DEFINE_PER_CPU Per_cpu<Thread::Dbg_stack> Thread::dbg_stack;
 
 STATIC_INITIALIZER_P (int3_handler_init, KDB_INIT_PRIO);
@@ -526,6 +548,7 @@ void
 int3_handler_init()
 {
   Thread::set_int3_handler(Thread::handle_int3);
+  Thread::set_int42_handler(Thread::handle_int3);
 }
 
 IMPLEMENT static inline NEEDS ["gdt.h"]
@@ -575,6 +598,13 @@ Thread::set_int3_handler(int (*handler)(Trap_state *ts))
   int3_handler = handler;
 }
 
+
+PUBLIC static inline
+void
+Thread::set_int42_handler(int (*handler)(Trap_state *ts))
+{
+  int42_handler = handler;
+}
 /**
  * Default handle for int3 extensions if JDB is disabled. If the JDB is
  * available, Jdb::handle_int3_threadctx is called instead.
