// vim: ft=cpp

/*
 * manager --
 *
 *     Definition of the instance manager that knows about all
 *     redundant VCPUs as well as the fault observers.
 *
 * (c) 2011-2013 Björn Döbel <doebel@os.inf.tu-dresden.de>,
 *     economic rights: Technische Universität Dresden (Germany)
 * This file is part of TUD:OS and distributed under the terms of the
 * GNU General Public License 2.
 * Please see the COPYING-GPL-2 file for details.
 */

/*
 * Romain instance manager
 */

#pragma once

#include "constants.h"
#include "app"
#include "thread_group.h"
//#include "app_loading"
#include "fault_observers"
#include "cpuid.h"

#include <vector>
#include <cstdio>
#include <algorithm>

#include "redundancy.h"
#include <l4/plr/measurements.h>

#if SPLIT_HANDLING
EXTERN_C void *split_handler_fn(void*);
#endif // SPLIT_HANDLING

namespace Romain
{
	/*
	 * Map logical (=sequential) CPU numbers to the topology of the underlying
	 * platform.
	 *
	 * Background: Fiasco.OC uses sequential CPU numbers to assign threads to CPUs. These
	 *             numbers are assigned during bootup and their order depends on the order
	 *             in which booted CPUs come up. This means, assigning two threads to CPUs
	 *             0 and 1 can in one case mean that they are running on the same core in
	 *             different hyperthreads, while in the next run, they run on the different
	 *             physical CPUs (or even NUMA domains, if we had those).
	 *
	 *             The purpose of this map is to make the assignment less surprising, e.g.,
	 *             for the same platform, assigning to two specific CPU IDs should always
	 *             lead to the same performance.
	 */
	class LogicalCPUMap
	{
		protected:
		std::vector<CPU_id> _fiasco_cpus;

		static void* topology_scanner(void* data)
		{
			for (unsigned cpu = 0; cpu < CPUID::num_cpus(); ++cpu) {
				Romain::LogicalCPUMap *m = reinterpret_cast<Romain::LogicalCPUMap*>(data);

				L4::Cap<L4::Thread> thread(pthread_getl4cap(pthread_self()));
				l4_sched_param_t sp = l4_sched_param(2);
				sp.affinity = l4_sched_cpu_set(cpu, 0);
				chksys(L4Re::Env::env()->scheduler()->run_thread(thread, sp));

				m->_fiasco_cpus[cpu] = CPUID::current_apicid(cpu);
			}
			return 0;
		}


		void scan_topology()
		{
			/* Check if we can perform a topology query. */
			if (CPUID::max_cpuid() < CPUID::TOPOLOGY) {
				INFO() << "CPU does not provide topology information";
				return;
			}

			pthread_t p;
			int ret = pthread_create(&p, 0, Romain::LogicalCPUMap::topology_scanner, this);
			_check(ret != 0, "error creating topology scanner");
			ret = pthread_join(p, 0);
			INFO() << "Topology scan completed.";
		}


		void print_map()
		{
			INFO() << "Virtual to Fiasco CPU map";

			for (unsigned i = 0; i < CPUID::num_cpus(); ++i) {
				INFO() << "virt# " << i << " fiasco# " << _fiasco_cpus[i].fiasco_id
				       << " apic# " << std::hex << _fiasco_cpus[i].apic_id;
			}
		}

		public:
			LogicalCPUMap()
				: _fiasco_cpus(MAX_CPUS)
			{
				/* Default: identity mapping if nothing else works */
				for (unsigned i = 0; i < MAX_CPUS; ++i) {
					_fiasco_cpus[i].fiasco_id = i;
					_fiasco_cpus[i].apic_id   = i;
				}

				if (CPUID::have_cpuid()) {
					scan_topology();
					std::sort(_fiasco_cpus.begin(), _fiasco_cpus.end(), CPU_id::comp_apic);
					print_map();
				}

				//enter_kdebug("cpu");

			}

			unsigned logicalToCPU(unsigned log)
			{
				INFO() << log << " -> " << _fiasco_cpus[log].fiasco_id;
				return _fiasco_cpus[log].fiasco_id;
			}
	};

	/*
	 * Set up and keep track of the running instances
	 */
	class InstanceManager : public LogicalCPUMap
	{
		private:
			Romain::App_model *_am;
			std::vector<Romain::App_instance *> _instances;    // instance list
			std::vector<Romain::Thread_group *> _threadgroups; // list of thread groups

			Romain::Observer *_observer_list[Romain::MAX_OBSERVERS]; // exception observer list
			//Romain::RedundancyCallback *_callback;                 // the callback for redundancy checking
			unsigned _num_observers;
			
			char const *_name;        // app name
			unsigned    _num_inst;    // number of instances to run
			l4_umword_t _num_cpu;     // number of available CPUs

			l4_addr_t _init_eip;      // initial EIP (from ELF)
			l4_addr_t _init_esp;      // initial ESP (from ELF)
			unsigned _gdt_min;        // start of GDT entries

			unsigned     _argc;       // client argc
			char const **_argv;       // argv of the client

			Measurements::EventBuf *_logBuf;

#if SPLIT_HANDLING
			pthread_t _split_handler; // resilient core handler thread
#endif // SPLIT_HANDLING


			/*
			 * Prepare handler stack by pushing 3 values:
			 *
			 * 1st parameter is an app_thread
			 * 2nd parameter is an app_instance
			 * 3rd parameter is a dummy for the location where usually the
			 *                  return address would be located
			 * 4th parameter is the thread group we are dealing with
			 */
			l4_addr_t prepare_stack(l4_addr_t sp, Romain::App_instance *inst,
			                        Romain::App_thread *thread, Romain::Thread_group* tgroup);


			void configure_logflags(char *flags);
			void configure_fault_observers();
			void configure_redundancy();
			void configure_logbuf(int size);

		public:
			InstanceManager(unsigned argc, char const **argv, unsigned num_instances = 1);


			/*
			 * Prepare the replica instances (VCPUs)
			 */
			void create_instances();

			/*
			 * Create a single replica thread along with
			 * its VCPU handler stack
			 */
			Romain::App_thread* create_thread(l4_umword_t eip, l4_umword_t esp, unsigned inst, Romain::Thread_group *group);

			/*
			 * Create a group of replica threads, e.g., all replicas
			 * of a single original thread
			 */
			Romain::Thread_group* create_thread_group(l4_umword_t eip, l4_umword_t esp,
													  std::string, unsigned cap, unsigned uid);

			/*
			 * Setup the VCPU handler stack.
			 *
			 * Puts fake parameters on the handler stack so that
			 * upon an event it looks like we got them passed as
			 * parameters.
			 */
			void prepare_handler_stack(Romain::App_thread *t, Romain::App_instance* i);

			/* 
			 * Start the instances
			 */
			void run_instances();


			void register_fault_observer(Romain::Observer* ob)
			{
				_check(_num_observers >= MAX_OBSERVERS, "no more observers");
				_observer_list[_num_observers++] = ob;
			}


#if 0
			Romain::RedundancyCallback *redundancy() const { return _callback; }


			void set_redundancy_callback(Romain::RedundancyCallback* cb)
			{
				_check(_callback != 0, "there is already a callback registered?");
				_callback = cb;
			}
#endif


			void startup_notify(Romain::App_instance *i, Romain::App_thread *t,
			                    Romain::Thread_group* tg, Romain::App_model *a) const
			{
				// XXX would need to be aware of observer list modifications
				//     -> for now, we assume that observers are not added/removed
				//        at runtime. otherwise we'd use sth. like an r/w lock with
				//        reader prioritization??
				for (unsigned idx = 0; idx < _num_observers; ++idx) {
					DEBUG() << "[" << i->id() << "] startup notifying: " << _observer_list[idx]->name();
					_observer_list[idx]->startup_notify(i,t,tg,a);
				}
			}


			/*
			 * Entry point for CPU exception handling.
			 *
			 * Iterates over the list of registered observers and calls
			 * every observer's notify() function. Observers may stop
			 * this iteration process. See Romain::Observer::ObserverReturnVal
			 */
			Romain::Observer::ObserverReturnVal
			fault_notify(Romain::App_instance *i, Romain::App_thread *t,
			             Romain::Thread_group* tg, Romain::App_model *a)
			{
				Romain::Observer::ObserverReturnVal v = Romain::Observer::Ignored;
				// XXX would need to be aware of observer list modifications
				//     -> for now, we assume that observers are not added/removed
				//        at runtime. otherwise we'd use sth. like an r/w lock with
				//        reader prioritization??
				for (unsigned idx = 0; idx < _num_observers; ++idx) {
					//DEBUG() << "[" << i->id() << "] notifying: " << _observer_list[idx]->name();
					v = _observer_list[idx]->notify(i,t,tg,a);
					switch(v) {
						case Romain::Observer::Finished:
						case Romain::Observer::Replicatable:
							//DEBUG() << "Fault handling done: " << std::hex << v;
							return v;
						default: break;
					}
				}

				return v;
			}


			void query_observer_status()
			{
				for (unsigned idx = 0; idx < _num_observers; ++idx) {
					//INFO() << "querying: " << _observer_list[idx]->name();
					_observer_list[idx]->status();
				}
			}


			unsigned instance_count() const { return _num_inst; }

			Measurements::EventBuf* logbuf() { return _logBuf; }
			void logdump();

			void show_stats()
			{
				for (auto it = _threadgroups.begin(); it != _threadgroups.end(); ++it) {
					(*it)->halt();
				}
				query_observer_status();
				logdump();
			}

			static void VCPU_handler(Romain::InstanceManager *m, Romain::App_instance *i, Romain::App_thread *t, Romain::Thread_group* tg, Romain::App_model *a);
			static void VCPU_startup(Romain::InstanceManager *m, Romain::App_instance *i, Romain::App_thread *t, Romain::Thread_group* tg, Romain::App_model *a);


		private:
			/*
			 * Read config from cfg file
			 */
			void configure();
	};

	extern Romain::InstanceManager* _the_instance_manager;
}
