// vi:ft=cpp
/**
 * \file
 * \brief Scheduler object functions.
 */
/*
 * (c) 2008-2009 Adam Lackorzynski <adam@os.inf.tu-dresden.de>,
 *               Alexander Warg <warg@os.inf.tu-dresden.de>
 *     economic rights: Technische Universität Dresden (Germany)
 *
 * This file is part of TUD:OS and distributed under the terms of the
 * GNU General Public License 2.
 * Please see the COPYING-GPL-2 file for details.
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */
#pragma once

#include <l4/sys/icu>
#include <l4/sys/scheduler.h>
#include <l4/sys/capability>
#include <l4/sys/cxx/ipc_iface>

namespace L4 {

/**
 * Scheduler object.
 * \ingroup l4_obj_api
 *
 * <c>\#include <l4/sys/scheduler></c>
 *
 * \see \ref l4_scheduler_api for an overview description.
 *
 */
class L4_EXPORT Scheduler :
  public Kobject_t<Scheduler, Icu, L4_PROTO_SCHEDULER,
                   Type_info::Demand_t<1> >
{
public:
  /// ABI function for 'info' call
  L4_INLINE_RPC_NF_OP(L4_SCHEDULER_INFO_OP,
      l4_msgtag_t, info, (l4_umword_t gran_offset, l4_umword_t *map,
                          l4_umword_t *cpu_max));

  /**
   * Get scheduler information.
   * \ingroup l4_scheduler_api
   *
   * \param[out]    cpu_max Maximum number of CPUs ever available.
   * \param[in,out] cpus    \a cpus.offset is first CPU of interest.
   *                        \a cpus.granularity (see l4_sched_cpu_set_t).
   *                        \a cpus.map Bitmap of online CPUs.
   * \param         utcb    UTCB pointer of the calling thread. This defaults
   *                        to the UTCB of the current thread.
   *
   * \return 0 on success, <0 error code otherwise.
   */
  l4_msgtag_t info(l4_umword_t *cpu_max, l4_sched_cpu_set_t *cpus,
                   l4_utcb_t *utcb = l4_utcb()) const throw()
  {
    l4_umword_t max = 0;
    l4_msgtag_t t =
      info_t::call(c(), cpus->gran_offset, &cpus->map, &max, utcb);
    if (cpu_max) *cpu_max = max;
    return t;
  }

  /**
   * Run a thread on a Scheduler.
   * \ingroup l4_scheduler_api
   *
   * \param thread Capability of the thread to run.
   * \param sp     Scheduling parameters.
   *
   * \return 0 on success, <0 error code otherwise.
   */
  L4_INLINE_RPC_OP(L4_SCHEDULER_RUN_THREAD_OP,
      l4_msgtag_t, run_thread, (Ipc::Cap<Thread> thread, l4_sched_param_t const &sp));

  /**
   * Query the idle time (in µs) of a CPU.
   * \ingroup l4_scheduler_api
   *
   * \param cpus  Set of CPUs to query. Only the idle time of the first
   *              selected CPU is queried.
   * \param[out]  us Idle time of queried CPU in µs.
   *
   * \return 0 on success, <0 error code otherwise.
   */
  L4_INLINE_RPC_OP(L4_SCHEDULER_IDLE_TIME_OP,
      l4_msgtag_t, idle_time, (l4_sched_cpu_set_t const &cpus,
                               l4_kernel_clock_t *us));

  /**
   * Query if a CPU is online.
   * \ingroup l4_scheduler_api
   *
   * \param cpu   CPU number whose online status should be queried.
   * \param utcb  UTCB pointer of the calling thread. Defaults to \a l4_utcb().
   * \return true if online, false if not (or any other query error).
   */
  bool is_online(l4_umword_t cpu, l4_utcb_t *utcb = l4_utcb()) const throw()
  { return l4_scheduler_is_online_u(cap(), cpu, utcb); }

  typedef L4::Typeid::Rpcs_sys<info_t, run_thread_t, idle_time_t> Rpcs;
};
}
