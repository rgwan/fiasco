// vi:ft=cpp

#pragma once

#include "debug.h"
#include "hw_device.h"
#include "resource.h"
#include <l4/vbus/vbus_gpio.h>

namespace Hw {

class Gpio_chip
{
public:
  enum Fix_mode
  {
    Input  = L4VBUS_GPIO_SETUP_INPUT,
    Output = L4VBUS_GPIO_SETUP_OUTPUT,
    Irq    = L4VBUS_GPIO_SETUP_IRQ,
  };

  virtual void request(unsigned pin) = 0;
  virtual void free(unsigned pin) = 0;


  virtual void setup(unsigned pin, unsigned mode, int value = 0) = 0;
  virtual void config_pad(unsigned pin, unsigned pinmask,
                          unsigned func, unsigned value) = 0;
  virtual void config_get(unsigned pin, unsigned pinmask,
                          unsigned func, unsigned *value) = 0;

  virtual int get(unsigned pin) = 0;
  virtual void set(unsigned pin, int value) = 0;
  virtual int get_irq(unsigned pin) = 0;


  virtual void multi_setup(unsigned mask, unsigned mode, unsigned outvalue = 0) = 0;
  virtual void multi_config_pad(unsigned mask, unsigned func, unsigned value) = 0;
  virtual void multi_set(unsigned mask, unsigned data) = 0;
  virtual unsigned multi_get() = 0;


  void ouput(unsigned pin, int value)
  { setup(pin, Output, value); }

  void input(unsigned pin)
  { setup(pin, Input); }

  void multi_output(unsigned mask, unsigned data)
  { multi_setup(mask, mask, data); }

  void multi_input(unsigned mask)
  { multi_setup(mask, ~mask); }
};

class Gpio_device :
  public Gpio_chip,
  public Hw::Device
{
};

}

class Gpio_resource : public Resource
{
public:
  explicit Gpio_resource(Hw::Device *dev, unsigned start, unsigned end)
  : Resource(Gpio_res | F_fixed_size | F_fixed_addr | F_relative, start, end),
    _hw(dynamic_cast<Hw::Gpio_device*>(dev))
  {
    if (!_hw)
      {
        d_printf(DBG_ERR,
                 "ERROR: GPIO: failed to assign GPIO-device (%p: %s) to resource\n",
                 dev, dev ? dev->name() : "");
        throw("ERROR: GPIO: failed to assign GPIO-device to resource");
      }
  }

  void dump(int indent) const;

  Hw::Gpio_device *provider() const { return _hw; }

private:
  Gpio_resource(Gpio_resource const &);
  void operator = (Gpio_resource const &);

  Hw::Gpio_device *_hw;
};
