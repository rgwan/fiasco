// vi:ft=cpp
/*
 * (c) 2013-2014 Alexander Warg <warg@os.inf.tu-dresden.de>
 *               Matthias Lange <matthias.lange@kernkonzept.com>
 *
 * This file is part of TUD:OS and distributed under the terms of the
 * GNU General Public License 2.
 * Please see the COPYING-GPL-2 file for details.
 *
 * As a special exception, you may use this file as part of a free software
 * library without restriction.  Specifically, if other files instantiate
 * templates or use macros or inline functions from this file, or you compile
 * this file and link it with other files to produce an executable, this
 * file does not by itself cause the resulting executable to be covered by
 * the GNU General Public License.  This exception does not however
 * invalidate any other reasons why the executable file might be covered by
 * the GNU General Public License.
 */

#pragma once

#include "virtio.h"
#include <l4/sys/capability>
#include <l4/sys/cxx/ipc_client>
#include <l4/re/dataspace>
#include <l4/sys/irq>

namespace L4virtio {
class Device :
  public L4::Kobject_t<Device, L4::Kobject, L4VIRTIO_PROTOCOL,
                       L4::Type_info::Demand_t<1> >
{
public:
  typedef l4virtio_config_queue_t Config_queue;
  struct Config_hdr : l4virtio_config_hdr_t
  {
    Config_queue *queues() const
    { return l4virtio_config_queues(this); }

    template <typename T>
    T *device_config() const
    {
      return static_cast<T*>(l4virtio_device_config(this));
    }
  };

  L4_INLINE_RPC(long, set_status, (unsigned status));
  L4_INLINE_RPC(long, config_queue, (unsigned queue));
  L4_INLINE_RPC(long, register_ds, (L4::Ipc::Cap<L4Re::Dataspace> ds_cap,
                                    l4_uint64_t base, l4_umword_t offset,
                                    l4_umword_t size));

  L4_INLINE_RPC(long, register_iface, (L4::Ipc::Cap<L4::Triggerable> guest_irq,
                                       L4::Ipc::Out<L4::Cap<L4::Triggerable> > host_irq,
                                       L4::Ipc::Out<L4::Cap<L4Re::Dataspace> > config_ds));

  typedef L4::Typeid::Rpcs<set_status_t, config_queue_t, register_iface_t, register_ds_t> Rpcs;
};

}
